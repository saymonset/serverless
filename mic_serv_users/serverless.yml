service: national-vaccine-control-app
useDotenv: true
provider:
  name: aws
  runtime: python3.8
  environment:
    MONGO_URI: mongodb+srv://cartillauser:C4rt1ll42023@cluster0.fkuv17j.mongodb.net/
    STRIP_STAGE_PATH: yes

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-auto-swagger
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  autoswagger:
    useRedirectUI: true
    host: 'jecuuw4xqc.execute-api.us-east-1.amazonaws.com'
    basePath: '/dev'
    schemes: ['https', 'http']
    apiKeyHeaders: ['Authorization']
  pythonRequirements:
    usePipenv: false
    dockerizePip: true
    zip: true
    slim: true
    
functions:
  # TOKEN
  verify-token:
    handler: Token/handler.verifyToken
    package:
      patterns:
        - "Token/handler.py"

  # USERS
  add-users:
    handler: Users/addUser/handler.addUser
    package:
      patterns:
        - "Users/addUser/handler.py"
    events:
      - http:
          path: user
          method: POST
          cors: true
          bodyType: "User"
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          request:
            schemas:
              application/json: ${file(Users/user-schema.json)}

  # DEPENDENTS
  add-dependent:
    handler: Dependents/addDependent/handler.addDependent
    package:
      patterns:
        - "Dependents/addDependent/handler.py"
    events:
      - http:
          path: dependent
          method: POST
          cors: true
          bodyType: "Dependent"
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          request:
            schemas:
              application/json: ${file(Dependents/dependent-schema.json)}
  get-dependent:
    handler: Dependents/getDependent/handler.getDependent
    package:
      patterns:
        - "Dependents/getDependent/handler.py"
    events:
      - http:
          path: dependent/{id}
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          request:
            parameters: 
              paths: 
                id: true
  get-dependents:
    handler: Dependents/getDependent/handler.getDependents
    package:
      patterns:
        - "Dependents/getDependent/handler.py"
    events:
      - http:
          path: dependents
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0

  # LOGIN
  login:
    handler: Login/login/handler.login
    package:
      patterns:
        - "Login/login/handler.py"
    events:
      - http:
          path: login
          method: POST
          cors: true
          bodyType: "Login"
          request:
            schemas:
              application/json: ${file(Login/login/login-schema.json)}
  logout:
    handler: Login/logout/handler.logout
    package:
      patterns:
        - "Login/logout/handler.py"
    events:
      - http:
          path: logout
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  
  # PHONE
  send-sms:
    handler: Phone/sendSms/handler.sendSms
    package:
      patterns:
        - "Phone/sendSms/handler.py"
    events:
      - http:
          path: sendsms
          method: POST
          cors: true
          bodyType: "SMS"
          request:
            schemas:
              application/json: ${file(Phone/sendSms/phone-schema.json)}
  check-code:
    handler: Phone/checkCode/handler.checkCode
    package:
      patterns:
        - "Phone/checkCode/handler.py"
    events:
      - http:
          path: checkcode
          method: POST
          cors: true
          bodyType: "Code"
          request:
            schemas:
              application/json: ${file(Phone/checkCode/code-schema.json)}


	
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'